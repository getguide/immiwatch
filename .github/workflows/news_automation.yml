name: 📰 News Automation

on:
  repository_dispatch:
    types: [news_article]

jobs:
  process-news:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install dependencies
        run: |
          pip install requests
          
      - name: 🔍 Determine Article Type
        id: article_type
        run: |
          # Read the event data to determine category
          if [ -f "$GITHUB_EVENT_PATH" ]; then
            CATEGORY=$(jq -r '.client_payload.category // .client_payload.draw_type // "general"' "$GITHUB_EVENT_PATH")
            echo "category=$CATEGORY" >> $GITHUB_OUTPUT
            
            # Check if this is a draw article
            if [[ "$CATEGORY" == "draw" || "$CATEGORY" == "draws" || "$CATEGORY" == "CEC" || "$CATEGORY" == "Health" || "$CATEGORY" == "PNP" || "$CATEGORY" == "General" || "$CATEGORY" == "FSTP" || "$CATEGORY" == "FSWP" ]]; then
              echo "is_draw=true" >> $GITHUB_OUTPUT
              echo "automation_script=draw_automation.py" >> $GITHUB_OUTPUT
            else
              echo "is_draw=false" >> $GITHUB_OUTPUT
              echo "automation_script=news_automation.py" >> $GITHUB_OUTPUT
            fi
          else
            echo "category=general" >> $GITHUB_OUTPUT
            echo "is_draw=false" >> $GITHUB_OUTPUT
            echo "automation_script=news_automation.py" >> $GITHUB_OUTPUT
          fi
          
      - name: 🎯 Process Draw Article
        if: steps.article_type.outputs.is_draw == 'true'
        id: draw_automation
        run: |
          echo "🔍 Starting draw automation..."
          python scripts/draw_automation.py > draw_output.txt 2>&1
          EXIT_CODE=$?
          echo "📄 Full output:"
          cat draw_output.txt
          echo "🔍 Exit code: $EXIT_CODE"
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Draw automation succeeded"
            echo "success=true" >> $GITHUB_OUTPUT
            if grep -q "article_url=" draw_output.txt; then
              ARTICLE_URL=$(grep "article_url=" draw_output.txt | cut -d'=' -f2)
              echo "article_url=$ARTICLE_URL" >> $GITHUB_OUTPUT
              echo "📄 Article URL: $ARTICLE_URL"
            fi
            if grep -q "title=" draw_output.txt; then
              TITLE=$(grep "title=" draw_output.txt | cut -d'=' -f2)
              echo "title=$TITLE" >> $GITHUB_OUTPUT
              echo "📝 Title: $TITLE"
            fi
          else
            echo "❌ Draw automation failed"
            echo "success=false" >> $GITHUB_OUTPUT
            if grep -q "error=" draw_output.txt; then
              ERROR=$(grep "error=" draw_output.txt | cut -d'=' -f2)
              echo "error=$ERROR" >> $GITHUB_OUTPUT
              echo "🚨 Error: $ERROR"
            else
              echo "error=Unknown error in draw automation" >> $GITHUB_OUTPUT
              echo "🚨 Unknown error in draw automation"
            fi
          fi
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: 📰 Process General News Article
        if: steps.article_type.outputs.is_draw == 'false'
        id: news_automation
        run: |
          python scripts/news_automation.py > news_output.txt 2>&1
          if [ $? -eq 0 ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            if grep -q "article_url=" news_output.txt; then
              ARTICLE_URL=$(grep "article_url=" news_output.txt | cut -d'=' -f2)
              echo "article_url=$ARTICLE_URL" >> $GITHUB_OUTPUT
            fi
            if grep -q "title=" news_output.txt; then
              TITLE=$(grep "title=" news_output.txt | cut -d'=' -f2)
              echo "title=$TITLE" >> $GITHUB_OUTPUT
            fi
          else
            echo "success=false" >> $GITHUB_OUTPUT
            if grep -q "error=" news_output.txt; then
              ERROR=$(grep "error=" news_output.txt | cut -d'=' -f2)
              echo "error=$ERROR" >> $GITHUB_OUTPUT
            fi
          fi
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
          
      - name: 📝 Commit and Push Changes
        if: steps.draw_automation.outputs.success == 'true' || steps.news_automation.outputs.success == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          
          # Determine commit message based on article type
          if [ "${{ steps.article_type.outputs.is_draw }}" == "true" ]; then
            git commit -m "🎯 AUTO: New Draw Article - ${{ steps.draw_automation.outputs.title }}" || echo "No changes to commit"
          else
            git commit -m "📰 AUTO: New News Article - ${{ steps.news_automation.outputs.title }}" || echo "No changes to commit"
          fi
          
          # Use GitHub token for authentication
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin main || echo "Push failed, but continuing"
          
      - name: 🎉 Success Notification
        if: steps.draw_automation.outputs.success == 'true' || steps.news_automation.outputs.success == 'true'
        run: |
          if [ "${{ steps.article_type.outputs.is_draw }}" == "true" ]; then
            echo "✅ Draw article created successfully!"
            echo "📄 Article URL: ${{ steps.draw_automation.outputs.article_url }}"
            echo "📝 Title: ${{ steps.draw_automation.outputs.title }}"
          else
            echo "✅ News article created successfully!"
            echo "📄 Article URL: ${{ steps.news_automation.outputs.article_url }}"
            echo "📝 Title: ${{ steps.news_automation.outputs.title }}"
          fi
          
      - name: ❌ Error Notification
        if: steps.draw_automation.outputs.success == 'false' || steps.news_automation.outputs.success == 'false'
        run: |
          if [ "${{ steps.article_type.outputs.is_draw }}" == "true" ]; then
            echo "❌ Draw article creation failed!"
            echo "🚨 Error: ${{ steps.draw_automation.outputs.error }}"
          else
            echo "❌ News article creation failed!"
            echo "🚨 Error: ${{ steps.news_automation.outputs.error }}"
          fi 